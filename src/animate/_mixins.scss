
/*
 * Imports
 * -------
 */

@use 'sass:map';
@use 'sass:string';

/* 
 * Set transform for hovers
 * ------------------------
 *
 * @param [string] $value
 *
 */

@mixin transformHover( $value ) {
  .a-hover:hover &,
  .a-hover:focus &,
  .a-hover:active &,
  &.a-hover:hover,
  &.a-hover:focus,
  &.a-hover:active {
    transform: string.unquote( $value ) !important;
  }
}

/* 
 * Set translate transforms
 * ------------------------
 *
 * @param [map] $values
 * @param [string] $type
 *
 */

@mixin transformTranslate( $values, $type: 'y' ) {
  $showTransform: "translate#{$type}( 0 )";

  @extend %u-transition-property-opacity-transform;

  .js & {
    @each $k, $v in $values {
      $p: $v;
      $reverseP: $v * -1;
      $transform: "translate#{$type}( #{$p} )";
      $transformReverse: "translate#{$type}( #{$reverseP} )";
      $dataAttr: "&[data-#{$type}='#{$k}']";

      @if $k == def {
        & {
          transform: string.unquote( $transform );
        }
      } @else {
        #{$dataAttr} {
          transform: string.unquote( $transform );
        }
      }

      @include transformHover( "translate#{$type}( #{$p} )" );

      &[data-reverse] {
        @if $k == def {
          & {
            transform: string.unquote( $transformReverse );
          }
        } @else {
          #{$dataAttr} {
            transform: string.unquote( $transformReverse );
          }
        }

        @include transformHover( "translate#{$type}( #{$reverseP} )" );
      }
    }
  }
  
  .js [data-vis-all] &,
  .js &[data-show],
  .js &[data-vis] {
    &,
    &[data-reverse] {
      transform: string.unquote( $showTransform );
    }
  }
}

/* 
 * Set transition duration property
 * --------------------------------
 *
 * @param [map] $durations
 *
 */

@mixin transitionDurations( $durations ) {
  @each $k, $v in $durations {
    @if $k == def {
      transition-duration: string.unquote( $v );
    } @else {
      &[data-d="#{$k}"] {
        transition-duration: string.unquote( $v );
      }
    }
  }
}

/* 
 * Transition / transform fade classes
 * -----------------------------------
 */

@mixin transitionFade( $transitions ) {
  $fade: map.get( $transitions, 'fade' );
  $durations: map.get( $fade, 'durations' );
  $y: map.get( $fade, 'y' );
  $x: map.get( $fade, 'x' );

  .a-fade-in,  
  .a-fade-in-y,
  .a-fade-in-x {
    @extend %u-transform-origin-0-0;
    @extend %u-transition-timing-function-cubic;
    @include transitionDurations( $durations );

    .js & {
      @extend %u-opacity-0;
    }

    .js [data-vis-all] &,
    .js &[data-show],
    .js &[data-vis] {
      @extend %u-opacity-1;
    }
  }

  .a-fade-in {
    @extend %u-transition-property-opacity;
  }

  .a-fade-in-y {
    @include transformTranslate( $y, 'y' );  
  }

  .a-fade-in-x {
    @include transformTranslate( $x, 'x' );
  }  
}

/* 
 * Transition / transform scale classes
 * ------------------------------------
 */

@mixin transitionScale( $transitions ) {
  $scale: map.get( $transitions, 'scale' );
  $durations: map.get( $scale, 'durations' );
  $in: map.get( $scale, 'in' );
  $out: map.get( $scale, 'out' );

  .a-scale-in,
  .a-scale-out {
    @extend %u-transition-timing-function-cubic;
    @extend %u-transition-property-opacity-transform;
    @include transitionDurations( $durations );

    .js & {
      @extend %u-opacity-0;
    }
  }

  .a-scale-in {
    @each $k, $v in $in {
      @if $k == def {
        .js & {
          transform: scale( #{$v} );
        }
      } @else if $k == hover {
        @include transformHover( "scale( #{$v} )" );
      } @else {
        .js &[data-s="#{$k}"] {
          transform: scale( #{$v} );
        }
      }
    }

    .js [data-vis-all] &,
    .js &[data-show],
    .js &[data-vis] {
      @extend %u-opacity-1;
      transform: scale( 1 );
    }
  }

  .a-scale-out {
    .js [data-vis-all] &,
    .js &[data-show],
    .js &[data-vis] {
      @extend %u-opacity-1;

      @each $k, $v in $out {
        @if $k == def {
          transform: scale( #{$v} );
        } @else {
          &[data-s="#{$k}"] {
            transform: scale( #{$v} );
          }
        }
      }
    }

    @include transformHover( "scale( 1 )" );
  }
}
