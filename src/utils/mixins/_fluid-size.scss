
/*
 * Imports
 * -------
 */

@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use '../../config' as con;
@use '../functions/strip-unit' as s;
@use '../functions/calc-rem-em' as c;
@use 'breakpoint' as b;

/*
 * Fluid sizes ( font-size, padding, margins... )
 * ----------------------------------------------
 *
 * @param [string] $prop
 * @param [list] $sizes
 * @param [list] $widths
 * @param [list] $otherValues
 * @param [bool] $important
 */

@mixin fluidSize( $prop, $sizes, $widths, $important: false, $otherValues: null ) {
  $lastIndex: list.length( $sizes );

  @each $s in $sizes {
    $i: list.index( $sizes, $s );
    $w: list.nth( $widths, $i );
    $ww: c.calcRem( map.get( con.$breakpoints, list.nth( $widths, $i ) ) );
    $o: null;
    $m: null;

    @if meta.type-of( $otherValues ) == 'list' {
      $o: list.nth( $widths, $i );
    }

    @if $important {
      $m: #{'!important'};
    }

    @if $i == 1 {
      #{$prop}: $s $o $m;
    }

    @if $i == $lastIndex {
      @include b.breakpointMin( $w ) {
        #{$prop}: $s $o $m;
      }
    } @else {
      $nextS: list.nth( $sizes, $i + 1 );
      $nextW: list.nth( $widths, $i + 1 );
      $nextWw: c.calcRem( map.get( con.$breakpoints, list.nth( $widths, $i + 1 ) ) );

      @include b.breakpointMin( $w ) {
        #{$prop}: calc( #{ $s } + ( ( 100vw - #{ $ww } ) / ( #{ s.stripUnit( $nextWw ) } - #{ s.stripUnit( $ww ) } ) ) * ( #{ s.stripUnit( $nextS ) } - #{ s.stripUnit( $s ) } ) ) $o $m;
      }
    }
  }
}
