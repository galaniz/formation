/**
 * Utils - breakpoint
 */

/* Imports */

@use "sass:map";
@use "../../config" as con;
@use "../functions/calc-rem" as c;

/**
 * Mixin - min media query
 *
 * @param {string|number} $min - prop in $breakpoints map
 * @return {void}
 */

@mixin breakpoint-min($min) {
  @if map.has-key(con.$breakpoints, $min) {
    $bk-rem: c.calc-rem(map.get(con.$breakpoints, $min));

    @media only screen and (min-width: #{$bk-rem}) {
      @content;
    }
  } @else {
    @warn "#{$min} does not exist in breakpoints map.";
  }
}

/**
 * Mixin - max media query
 *
 * @param {string|number} $max - prop in $breakpoints map
 * @return {void}
 */

@mixin breakpoint-max($max) {
  @if map.has-key(con.$breakpoints, $max) {
    $bk-rem: c.calc-rem(map.get(con.$breakpoints, $max));

    @media only screen and (max-width: #{$bk-rem}) {
      @content;
    }
  } @else {
    @warn "#{$max} does not exist in breakpoints map.";
  }
}

/**
 * Mixin - min/max media query
 *
 * @param {string|number} $min - prop in $breakpoints map
 * @param {string|number} $max - prop in $breakpoints map
 * @return {void}
 */

@mixin breakpoint-min-max($min, $max) {
  @if map.has-key(con.$breakpoints, $min) and map.has-key(con.$breakpoints, $max) {
    $bk-min-rem: c.calc-rem(map.get(con.$breakpoints, $min));
    $bk-max-rem: c.calc-rem(map.get(con.$breakpoints, $max));

    @media only screen and (max-width: #{$bk-max-rem}) and (min-width: #{$bk-min-rem}) {
      @content;
    }
  } @else {
    @warn "#{$min} and/or #{$max} does not exist in breakpoints map.";
  }
}
