
/* Dependencies */

@use 'functions';

/*
 * Append font props to props list
 * -------------------------------
 */

@mixin fontProps( $fonts, $props ) {
	@each $k, $v in $fonts {
		@if $k == weight {
			@each $p, $w in $v {
				$props: functions.addProp( $props, (
					custom: (
						name: "font-weight-#{ $p }",
						prop: (
							font-weight: $w
						)
					)
				) );
			}
		} @else {
			$props: functions.addProp( $props, (
				custom: (
					name: "font-family-#{ $k }",
					prop: (
						font-family: $v
					)
				)
			) );
		}
	}
}

/*
 * Append transition props to props list
 * -------------------------------------
 */

@mixin transitionProps( $transitions, $props ) {
	@if( type-of( $transitions ) == 'map' ) {
		$durations: map-get( $transitions, 'durations' );
		$duration: map-get( $durations, 'def' );
		$timingFunction: map-get( $transitions, 'timingFunction' );
		$timingFunctionCubic: map-get( $transitions, 'timingFunctionCubic' );

		$props: functions.addProp( $props, ( transition-property: opacity ) );
		$props: functions.addProp( $props, ( transition-property: transform ) );

		@each $k, $v in $durations {
			$name: 'transition-duration';

			@if $k != def {
				$name: $name + '-' + $k;
			}

			$props: functions.addProp( $props, (
				custom: (
					name: $name,
					prop: (
						transition-duration: $v
					)
				)
			) );
	  }

		$props: functions.addProp( $props, (
			custom: (
				name: 'transition-property-opacity-transform',
				prop: (
					transition-property: 'opacity, transform'
				)
			)
		) );

		$props: functions.addProp( $props, (
			custom: (
				name: 'transition-timing-function',
				prop: (
					transition-timing-function: $timingFunction
				)
			)
		) );

		$props: functions.addProp( $props, (
			custom: (
				name: 'transition-timing-function-cubic',
				prop: (
					transition-timing-function: $timingFunctionCubic
				)
			)
		) );

		$props: functions.addProp( $props, (
			custom: (
				name: 'transition-opacity-transform-ease',
				prop: (
					transition: "opacity #{ $duration } #{ $timingFunction }, transform #{ $duration } #{ $timingFunction }"
				)
			)
		) );

		$props: functions.addProp( $props, (
			custom: (
				name: 'transition-transform-ease',
				prop: (
					transition: "transform #{ $duration } #{ $timingFunction }"
				)
			)
		) );

		$props: functions.addProp( $props, (
			custom: (
				name: 'transition-opacity-ease',
				prop: (
					transition: "opacity #{ $duration } #{ $timingFunction }"
				)
			)
		) );
	}
}

/*
 * Make utility placeholders
 * -------------------------
 *
 * @param [string] $key
 * @param [string/map] $value
 */

@mixin makeUtil( $key, $value ) {
	@if $key == custom {
		$map: $value;
		$name: map-get( $map, 'name' );
		$prop: map-get( $map, 'prop' );

		%u-#{ $name } {
			@each $key, $value in $prop {
				@if( type-of( $value ) == string and $name != 'content-empty' ) {
					#{ $key }: unquote( $value );
				} @else {
					#{ $key }: $value;
				}
			}
		}
	} @else {
		%u-#{ $key }-#{ $value } {
			@if( type-of( $value ) == string ) {
				#{ $key }: unquote( $value );
			} @else {
				#{ $key }: $value;
			}
		}
	}
}
