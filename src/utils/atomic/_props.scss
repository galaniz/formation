
/*
 * Utility properties
 * ------------------
 */

/* Dependencies */

@use 'functions';
@use 'mixins';
@use '../functions/calc-rem-em' as f;
@use '../mixins/grayscale' as m;
@use '../../config/variables' as frm;

/* Overflow */

frm.$props: functions.addProp( frm.$props, ( overflow: hidden ) );
frm.$props: functions.addProp( frm.$props, ( overflow: scroll ) );
frm.$props: functions.addProp( frm.$props, ( overflow-y: auto ) );
frm.$props: functions.addProp( frm.$props, ( overflow-x: hidden ) );

/* Floats */

frm.$props: functions.addProp( frm.$props, ( float: left ) );
frm.$props: functions.addProp( frm.$props, ( float: right ) );

/* Display */

frm.$props: functions.addProp( frm.$props, ( display: none ) );
frm.$props: functions.addProp( frm.$props, ( display: block ) );
frm.$props: functions.addProp( frm.$props, ( display: inline-block ) );
frm.$props: functions.addProp( frm.$props, ( display: flex ) );
frm.$props: functions.addProp( frm.$props, ( display: table ) );
frm.$props: functions.addProp( frm.$props, ( display: table-row  ) );
frm.$props: functions.addProp( frm.$props, ( display: table-cell ) );

/* Flexbox */

frm.$props: functions.addProp( frm.$props, ( flex-shrink: 0 ) );
frm.$props: functions.addProp( frm.$props, ( flex-grow: 1 ) );

/* Visibility */

frm.$props: functions.addProp( frm.$props, ( visibility: hidden ) );
frm.$props: functions.addProp( frm.$props, ( visibility: visible ) );

/* Content */

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: content-empty,
		prop: (
			content: ''
		)
	)
) );

/* Position */

frm.$props: functions.addProp( frm.$props, ( position: relative ) );
frm.$props: functions.addProp( frm.$props, ( position: absolute ) );
frm.$props: functions.addProp( frm.$props, ( position: fixed ) );
frm.$props: functions.addProp( frm.$props, ( top: 0 ) );
frm.$props: functions.addProp( frm.$props, ( bottom: 0 ) );
frm.$props: functions.addProp( frm.$props, ( left: 0 ) );
frm.$props: functions.addProp( frm.$props, ( right: 0 ) );
frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: position-vertical-center,
		prop: (
			top: 50%,
			transform: translateY( -50% ),
			bottom: auto
		)
	)
) );

/* Text align */

frm.$props: functions.addProp( frm.$props, ( text-align: left ) );
frm.$props: functions.addProp( frm.$props, ( text-align: right ) );
frm.$props: functions.addProp( frm.$props, ( text-align: center ) );
frm.$props: functions.addProp( frm.$props, ( text-align: justify ) );
frm.$props: functions.addProp( frm.$props, ( text-transform: uppercase ) );

/* Vertical align */

frm.$props: functions.addProp( frm.$props, ( vertical-align: bottom ) );
frm.$props: functions.addProp( frm.$props, ( vertical-align: middle ) );
frm.$props: functions.addProp( frm.$props, ( vertical-align: top ) );

/* Margin */

frm.$props: functions.addProp( frm.$props, ( margin: auto ) );
frm.$props: functions.addProp( frm.$props, ( margin-right: auto ) );
frm.$props: functions.addProp( frm.$props, ( margin-left: auto ) );

/* Border radius */

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: border-radius-100,
		prop: (
			border-radius: 100%
		)
	)
) );

/* Fonts */

@include mixins.fontProps( frm.$fonts, frm.$props );

/* Transform origin */

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: transform-origin-0-0,
		prop: (
			transform-origin: 0% 0%
		)
	)
) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: transform-origin-0-100,
		prop: (
			transform-origin: 0% 100%
		)
	)
) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: transform-origin-100-0,
		prop: (
			transform-origin: 100% 0%
		)
	)
) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: transform-origin-100-100,
		prop: (
			transform-origin: 100% 100%
		)
	)
) );

/* Opacity */

frm.$props: functions.addProp( frm.$props, ( opacity: 0 ) );
frm.$props: functions.addProp( frm.$props, ( opacity: 1 ) );

/* Transitions */

@include mixins.transitionProps( frm.$transitions, frm.$props );

/* Width / height */

frm.$props: functions.addProp( frm.$props, ( width: inherit ) );
frm.$props: functions.addProp( frm.$props, ( height: inherit ) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: width-100,
		prop: (
			width: 100%
		)
	)
) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: width-100vw,
		prop: (
			width: 100vw
		)
	)
) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: height-100,
		prop: (
			height: 100%
		)
	)
) );

frm.$props: functions.addProp( frm.$props, (
	custom: (
		name: height-100vh,
		prop: (
			height: 100vh
		)
	)
) );

/* Colors */

frm.$props: functions.addProp( frm.$props, ( color: inherit ) );
frm.$props: functions.addProp( frm.$props, ( background-color: inherit ) );

// save $colors
$colorsCopy: frm.$colors;

// convert nested colors to one level map
frm.$colors: functions.mapFlatten( frm.$colors, (), 'color' );

@each $name, $value in frm.$colors {
	frm.$props: functions.addProp( frm.$props, (
		custom: (
			name: $name,
			prop: (
				color: $value
			)
		)
	) );

	frm.$props: functions.addProp( frm.$props, (
		custom: (
			name: "background-#{ $name }",
			prop: (
				background-color: $value
			)
		)
	) );

	frm.$props: functions.addProp( frm.$props, (
		custom: (
			name: "fill-#{ $name }",
			prop: (
				fill: $value
			)
		)
	) );

	frm.$props: functions.addProp( frm.$props, (
		custom: (
			name: "border-#{ $name }",
			prop: (
				border-color: $value
			)
		)
	) );
}

// convert nested colors to one level map without prefix
frm.$colors: functions.mapFlatten( $colorsCopy, (), '' );

// convert properties to placeholders
@each $prop in frm.$props {
	@each $key, $value in $prop {
		@include mixins.makeUtil( $key, $value );
	}
}

/* Grayscale ( work around for duplicate key issue ) */

%u-grayscale {
	@include m.grayscale();
}

/* Visually hidden */

%u-visually-hidden {
	@extend %u-position-absolute;
	@extend %u-overflow-hidden;
	left: f.calcRem( -10000px );
	top: auto;
	width: f.calcRem( 1px );
	height: f.calcRem( 1px );
}

/* Touch area of 50px */

%u-touch-50 {
	&::before {
		@extend %u-content-empty;
		@extend %u-position-absolute;
		transform: translate( -50%, -50% );
		width: f.calcRem( 50px );
		height: f.calcRem( 50px );
		top: 50%;
		left: 50%;
	}
}
