/**
 * Layouts - gap fallback
 */

/* Imports */

@use "../config" as con;
@use "../utils/mixins" as mix;

/**
 * Mixin - set fallback
 *
 * @return {void}
 */

@mixin set-fallback() {
  margin: calc(var(--gap) * -1) 0 0 calc(var(--gap) * -1);

  & > * {
    padding: var(--gap) 0 0 var(--gap);
  }
}

/* Styles */

%l-gap-fallback {
  @include set-fallback;
}

@each $g in con.$gaps {
  .no-flex-gap .l-gap-fallback {
    @extend %l-gap-fallback;
  }
}

@each $c, $v in con.$containers {
  $suffix: "";

  @if $c != "default" {
    $suffix: "-#{$c}";
  }

  .no-flex-gap .l-gap-fallback.l-container#{$suffix} {
    left: 50%;
    position: relative;
    transform: translateX(calc(-50% + var(--gap) / 2));
    max-width: calc(var(--container#{$suffix}) + var(--gap));
  }
}
