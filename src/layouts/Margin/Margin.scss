/**
 * Layouts - Margin Styles
 */

/* Imports */

@use "sass:list";
@use "sass:string";
@use "../../config/config" as con;
@use "../../utils/breakpoints/breakpoints";

/* Class name infix */

$margin-infix: "margin";
$margin-top-infix: "margin-top";
$margin-bottom-infix: "margin-bottom";
$margin-y-infix: "margin-y";
$margin-left-infix: "margin-left";
$margin-right-infix: "margin-right";
$margin-x-infix: "margin-x";

@if con.$terse {
  $margin-infix: "m";
  $margin-top-infix: "mt";
  $margin-bottom-infix: "mb";
  $margin-y-infix: "my";
  $margin-left-infix: "ml";
  $margin-right-infix: "mr";
  $margin-x-infix: "mx";
}

/* Defaults */

.l-#{$margin-infix}-0 {
  margin: 0;
}

.l-#{$margin-infix}-auto {
  margin: auto;
}

.l-#{$margin-top-infix}-auto {
  margin-top: auto;
}

.l-#{$margin-left-infix}-auto {
  margin-left: auto;
}

.l-#{$margin-right-infix}-auto {
  margin-right: auto;
}

.l-#{$margin-bottom-infix}-auto {
  margin-bottom: auto;
}

/* Config margins */

@each $m in con.$margin-top {
  $selector: ".l-#{$margin-top-infix}-#{$m}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$margin-y-infix}-#{$m}";
  }

  #{string.quote($selector)} {
    margin-top: var(--#{$m});
  }
}

@each $m in con.$margin-bottom {
  $selector: ".l-#{$margin-bottom-infix}-#{$m}";

  @if list.index(con.$margin-bottom-all, $m) {
    $selector: "#{$selector}, #{$selector}-all > :not(:last-child)";
  }

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$margin-y-infix}-#{$m}";
  }

  #{string.unquote($selector)} {
    margin-bottom: var(--#{$m});
  }
}

@each $b in con.$margin-vertical-breakpoints {
  @include breakpoints.breakpoint-min($b) {
    @each $m in con.$margin-top {
      $selector: ".l-#{$margin-top-infix}-#{$m}-#{$b}";
    
      @if con.$xy {
        $selector: "#{$selector}, .l-#{$margin-y-infix}-#{$m}-#{$b}";
      }
    
      #{string.quote($selector)} {
        margin-top: var(--#{$m});
      }
    }

    @each $m in con.$margin-bottom {
      $selector: ".l-#{$margin-bottom-infix}-#{$m}";
    
      @if list.index(con.$margin-bottom-all, $m) {
        $selector: "#{$selector}-#{$b}, #{$selector}-all-#{$b} > :not(:last-child)";
      }

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$margin-y-infix}-#{$m}-#{$b}";
      }
    
      #{string.unquote($selector)} {
        margin-bottom: var(--#{$m});
      }
    }
  }
}

@each $m in con.$margin-left {
  $selector: ".l-#{$margin-left-infix}-#{$m}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$margin-x-infix}-#{$m}";
  }

  #{string.quote($selector)} {
    margin-left: var(--#{$m});
  }
}

@each $m in con.$margin-right {
  $selector: ".l-#{$margin-right-infix}-#{$m}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$margin-x-infix}-#{$m}";
  }

  #{string.quote($selector)} {
    margin-right: var(--#{$m});
  }
}

@each $b in con.$margin-horizontal-breakpoints {
  @include breakpoints.breakpoint-min($b) {
    @each $m in con.$margin-left {
      $selector: ".l-#{$margin-left-infix}-#{$m}-#{$b}";
    
      @if con.$xy {
        $selector: "#{$selector}, .l-#{$margin-x-infix}-#{$m}-#{$b}";
      }
    
      #{string.quote($selector)} {
        margin-left: var(--#{$m});
      }
    }

    @each $m in con.$margin-right {
      $selector: ".l-#{$margin-right-infix}-#{$m}-#{$b}";
    
      @if con.$xy {
        $selector: "#{$selector}, .l-#{$margin-x-infix}-#{$m}-#{$b}";
      }
    
      #{string.quote($selector)} {
        margin-right: var(--#{$m});
      }
    }
  }
}

/* Defaults */

.l-#{$margin-infix}-last-0 > :last-child {
  margin: 0;
}
