/**
 * Layouts - margin
 */

/* Imports */

@use "sass:list";
@use "sass:string";
@use "../config" as con;
@use "../utils/mixins" as mix;

/* Defaults */

.l-margin-0 {
  margin: 0;
}

.l-margin-auto {
  margin: auto;
}

.l-margin-top-auto {
  margin-top: auto;
}

.l-margin-left-auto {
  margin-left: auto;
}

.l-margin-right-auto {
  margin-right: auto;
}

.l-margin-bottom-auto {
  margin-bottom: auto;
}

/* Config margins */

@each $m in con.$margin-top {
  .l-margin-top-#{$m} {
    margin-top: var(--#{$m});
  }
}

@each $m in con.$margin-bottom {
  $selector: ".l-margin-bottom-#{$m}";

  @if list.index(con.$margin-bottom-all, $m) {
    $selector: "#{$selector}, #{$selector}-all > *:not(:last-child)";
  }

  #{string.unquote($selector)} {
    margin-bottom: var(--#{$m});
  }
}

@each $b in con.$margin-vertical-breakpoints {
  @include mix.breakpoint-min($b) {
    @each $m in con.$margin-top {
      .l-margin-top-#{$m}-#{$b} {
        margin-top: var(--#{$m});
      }
    }

    @each $m in con.$margin-bottom {
      $selector: ".l-margin-bottom-#{$m}";

      @if list.index(con.$margin-bottom-all, $m) {
        $selector: "#{$selector}-#{$b}, #{$selector}-all-#{$b} > *:not(:last-child)";
      }

      #{string.unquote($selector)} {
        margin-bottom: var(--#{$m});
      }
    }
  }
}

@each $m in con.$margin-left {
  .l-margin-left-#{$m} {
    margin-left: var(--#{$m});
  }
}

@each $m in con.$margin-right {
  .l-margin-right-#{$m} {
    margin-right: var(--#{$m});
  }
}

@each $b in con.$margin-horizontal-breakpoints {
  @include mix.breakpoint-min($b) {
    @each $m in con.$margin-left {
      .l-margin-left-#{$m}-#{$b} {
        margin-left: var(--#{$m});
      }
    }

    @each $m in con.$margin-right {
      .l-margin-right-#{$m}-#{$b} {
        margin-right: var(--#{$m});
      }
    }
  }
}

/* Defaults */

.l-margin-0-last > *:last-child {
  margin: 0;
}
