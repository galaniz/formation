/**
 * Layouts - Padding Styles
 */

/* Imports */

@use "sass:list";
@use "sass:string";
@use "../../config/config" as con;
@use "../../utils/getClassFix/getClassFix" as fix;
@use "../../utils/breakpoints/breakpoints";

/* Class name customization */

$padding-fix: fix.get-class-fix("padding");
$padding-top-fix: fix.get-class-fix("padding-top");
$padding-bottom-fix: fix.get-class-fix("padding-bottom");
$padding-y-fix: fix.get-class-fix("padding-y");
$padding-left-fix: fix.get-class-fix("padding-left");
$padding-right-fix: fix.get-class-fix("padding-right");
$padding-x-fix: fix.get-class-fix("padding-x");

/* Defaults */

.l-#{$padding-fix}-0 {
  padding: 0;
}

/* Config padding */

@each $p in con.$padding-top {
  $selector: ".l-#{$padding-top-fix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-y-fix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-top: var(--#{$p});
  }
}

@each $p in con.$padding-bottom {
  $selector: ".l-#{$padding-bottom-fix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-y-fix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-bottom: var(--#{$p});
  }
}

@each $b in con.$padding-vertical-breakpoints {
  @include breakpoints.breakpoint-min($b) {
    @each $p in con.$padding-top {
      $selector: ".l-#{$padding-top-fix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-y-fix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-top: var(--#{$p});
      }
    }

    @each $p in con.$padding-bottom {
      $selector: ".l-#{$padding-bottom-fix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-y-fix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-bottom: var(--#{$p});
      }
    }
  }
}

@each $p in con.$padding-left {
  $selector: ".l-#{$padding-left-fix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-x-fix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-left: var(--#{$p});
  }
}

@each $p in con.$padding-right {
  $selector: ".l-#{$padding-right-fix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-x-fix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-right: var(--#{$p});
  }
}

@each $b in con.$padding-horizontal-breakpoints {
  @include breakpoints.breakpoint-min($b) {
    @each $p in con.$padding-left {
      $selector: ".l-#{$padding-left-fix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-x-fix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-left: var(--#{$p});
      }
    }

    @each $p in con.$padding-right {
      $selector: ".l-#{$padding-right-fix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-x-fix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-right: var(--#{$p});
      }
    }
  }
}
