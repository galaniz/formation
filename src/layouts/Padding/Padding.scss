/**
 * Layouts - Padding Styles
 */

/* Imports */

@use "sass:list";
@use "sass:string";
@use "../../config/config" as con;
@use "../../utils/breakpoints/breakpoints";

/* Class name infix */

$padding-infix: "padding";
$padding-top-infix: "padding-top";
$padding-bottom-infix: "padding-bottom";
$padding-y-infix: "padding-y";
$padding-left-infix: "padding-left";
$padding-right-infix: "padding-right";
$padding-x-infix: "padding-x";

@if con.$terse {
  $padding-infix: "p";
  $padding-top-infix: "pt";
  $padding-bottom-infix: "pb";
  $padding-y-infix: "py";
  $padding-left-infix: "pl";
  $padding-right-infix: "pr";
  $padding-x-infix: "px";
}

/* Defaults */

.l-#{$padding-infix}-0 {
  padding: 0;
}

/* Config padding */

@each $p in con.$padding-top {
  $selector: ".l-#{$padding-top-infix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-y-infix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-top: var(--#{$p});
  }
}

@each $p in con.$padding-bottom {
  $selector: ".l-#{$padding-bottom-infix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-y-infix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-bottom: var(--#{$p});
  }
}

@each $b in con.$padding-vertical-breakpoints {
  @include breakpoints.breakpoint-min($b) {
    @each $p in con.$padding-top {
      $selector: ".l-#{$padding-top-infix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-y-infix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-top: var(--#{$p});
      }
    }

    @each $p in con.$padding-bottom {
      $selector: ".l-#{$padding-bottom-infix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-y-infix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-bottom: var(--#{$p});
      }
    }
  }
}

@each $p in con.$padding-left {
  $selector: ".l-#{$padding-left-infix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-x-infix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-left: var(--#{$p});
  }
}

@each $p in con.$padding-right {
  $selector: ".l-#{$padding-right-infix}-#{$p}";

  @if con.$xy {
    $selector: "#{$selector}, .l-#{$padding-x-infix}-#{$p}";
  }

  #{string.quote($selector)} {
    padding-right: var(--#{$p});
  }
}

@each $b in con.$padding-horizontal-breakpoints {
  @include breakpoints.breakpoint-min($b) {
    @each $p in con.$padding-left {
      $selector: ".l-#{$padding-left-infix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-x-infix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-left: var(--#{$p});
      }
    }

    @each $p in con.$padding-right {
      $selector: ".l-#{$padding-right-infix}-#{$p}-#{$b}";

      @if con.$xy {
        $selector: "#{$selector}, .l-#{$padding-x-infix}-#{$p}-#{$b}";
      }

      #{string.quote($selector)} {
        padding-right: var(--#{$p});
      }
    }
  }
}
