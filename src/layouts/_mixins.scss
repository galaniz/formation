/**
 * Layouts: mixins
 */

/* Imports */

@use "sass:meta";
@use "../utils/functions" as func;
@use "../utils/mixins" as mix;

/**
 * Make container classes with breakpoints
 */

@mixin make-containers($containers, $container-padding) {
  %u-margin-padding-0 {
    &[data-left] {
      margin-left: 0;
      padding-left: 0;
    }

    &[data-right] {
      margin-right: 0;
      padding-right: 0;
    }
  }

  @each $c, $width in $containers {
    $k: meta.inspect($c);
    $d: "";
    $suffix: "";

    @if $k != "def" {
      $d: "-";
      $suffix: "-#{$c}";
    } @else {
      $k: "";
    }

    .l-container#{$d}#{$k} {
      @extend %u-margin-right-auto;
      @extend %u-margin-left-auto;
      @extend %u-margin-padding-0;

      max-width: func.calc-rem($width + ($container-padding * 2));
      padding-left: func.calc-rem($container-padding);
      padding-right: func.calc-rem($container-padding);
    }
  }
}

/**
 * Make grid classes with breakpoints
 */

@mixin make-grid($grid, $grid-overwrite) {
  .l-100 {
    @extend %u-width-100;
  }

  $grid: $grid;

  @if meta.type-of($grid-overwrite) == map {
    $grid: $grid-overwrite;
  }

  @each $g, $v in $grid {
    .l-#{$g} {
      @extend %u-width-100;

      @each $bk, $width in $v {
        @include mix.breakpoint-min($bk) {
          width: $width;
        }
      }
    }
  }
}
